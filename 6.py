def greedy_algorithm(items, budget):
    """
    –ñ–∞–¥—ñ–±–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –≤–∏–±–∏—Ä–∞—î —Å—Ç—Ä–∞–≤–∏, –º–∞–∫—Å–∏–º—ñ–∑—É—é—á–∏ —Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è –∫–∞–ª–æ—Ä—ñ–π –¥–æ –≤–∞—Ä—Ç–æ—Å—Ç—ñ.
    """
    # –°–æ—Ä—Ç—É—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏ –∑–∞ —Å–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è–º –∫–∞–ª–æ—Ä—ñ–π/–≤–∞—Ä—Ç—ñ—Å—Ç—å —É –ø–æ—Ä—è–¥–∫—É —Å–ø–∞–¥–∞–Ω–Ω—è
    sorted_items = sorted(items.items(), key=lambda x: x[1]["calories"] / x[1]["cost"], reverse=True)
    
    selected = []
    total_calories = 0
    remaining_budget = budget

    for item, data in sorted_items:
        if data["cost"] <= remaining_budget:
            selected.append(item)
            total_calories += data["calories"]
            remaining_budget -= data["cost"]

    return selected, total_calories


def dynamic_programming(items, budget):
    """
    –î–∏–Ω–∞–º—ñ—á–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –¥–ª—è –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –Ω–∞–±–æ—Ä—É —Å—Ç—Ä–∞–≤.
    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø—ñ–¥—Ö—ñ–¥ "Knapsack Problem".
    """
    # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ —Å–ª–æ–≤–Ω–∏–∫ —É —Å–ø–∏—Å–æ–∫ –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ
    food_list = list(items.items())
    n = len(food_list)
    
    # DP-–º–∞—Å–∏–≤: dp[i][w] - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫–∞–ª–æ—Ä—ñ–π–Ω—ñ—Å—Ç—å –ø—Ä–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—ñ i –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ —Ç–∞ –±—é–¥–∂–µ—Ç—É w
    dp = [[0] * (budget + 1) for _ in range(n + 1)]

    # –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è DP-—Ç–∞–±–ª–∏—Ü—ñ
    for i in range(1, n + 1):
        item_name, data = food_list[i - 1]
        cost, calories = data["cost"], data["calories"]

        for w in range(budget + 1):
            if cost > w:
                dp[i][w] = dp[i - 1][w]  # –Ø–∫—â–æ –Ω–µ –º–æ–∂–µ–º–æ –≤–∑—è—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç, –±–µ—Ä–µ–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è
            else:
                dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - cost] + calories)

    # –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–±—Ä–∞–Ω–∏—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
    selected_items = []
    w = budget
    for i in range(n, 0, -1):
        if dp[i][w] != dp[i - 1][w]:  # –Ø–∫—â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–º—ñ–Ω–∏–ª–æ—Å—è, –∑–Ω–∞—á–∏—Ç—å, —Ü–µ–π –ø—Ä–µ–¥–º–µ—Ç –±—É–ª–æ –≤–∏–±—Ä–∞–Ω–æ
            selected_items.append(food_list[i - 1][0])
            w -= food_list[i - 1][1]["cost"]

    selected_items.reverse()  # –û—Å–∫—ñ–ª—å–∫–∏ –º–∏ –¥–æ–¥–∞–≤–∞–ª–∏ —É –∑–≤–æ—Ä–æ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É

    return selected_items, dp[n][budget]


# üìå –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–ª–≥–æ—Ä–∏—Ç–º—ñ–≤
items = {
    "pizza": {"cost": 50, "calories": 300},
    "hamburger": {"cost": 40, "calories": 250},
    "hot-dog": {"cost": 30, "calories": 200},
    "pepsi": {"cost": 10, "calories": 100},
    "cola": {"cost": 15, "calories": 220},
    "potato": {"cost": 25, "calories": 350}
}

budget = 60  # –ü—Ä–∏–∫–ª–∞–¥ –±—é–¥–∂–µ—Ç—É

# –í–∏–∫–æ–Ω–∞–Ω–Ω—è –∂–∞–¥—ñ–±–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º—É
greedy_result, greedy_calories = greedy_algorithm(items, budget)
print(f"–ñ–∞–¥—ñ–±–Ω–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º:\n–û–±—Ä–∞–Ω—ñ —Å—Ç—Ä–∞–≤–∏: {greedy_result}\n–ó–∞–≥–∞–ª—å–Ω–∞ –∫–∞–ª–æ—Ä—ñ–π–Ω—ñ—Å—Ç—å: {greedy_calories}")

# –í–∏–∫–æ–Ω–∞–Ω–Ω—è –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è
dp_result, dp_calories = dynamic_programming(items, budget)
print(f"\n–î–∏–Ω–∞–º—ñ—á–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è:\n–û–±—Ä–∞–Ω—ñ —Å—Ç—Ä–∞–≤–∏: {dp_result}\n–ó–∞–≥–∞–ª—å–Ω–∞ –∫–∞–ª–æ—Ä—ñ–π–Ω—ñ—Å—Ç—å: {dp_calories}")